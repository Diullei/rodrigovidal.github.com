@id: 2

@title: Controle de Versão com Git - Parte 1

@by: Rodrigo Vidal

@tags: Git

@category: Git

@date: '2011-01-11'

@deploy: true

@content:
 	
Olá pessoal, pretendo voltar com os posts no blog com mais frequência desta vez. Esta é uma das metas para este novo ano, e farei o máximo para alcançá-la. Começando leve…

##Motivação

Estou entrando em novos projetos e muitas mudanças estão acontecendo simultaneamente. Em um projeto recente que estou trabalhando optamos por utilizar um repositório privado do Sistema de Controle de Versão Distribuído chamado Git. 
Uma das razões para que isso acontecesse é a intenção de contribuir para projetos opensource através do GitHub. Logo entender o funcionamento desta ferramenta seria fundamental.

##O que é um Sistema de Controle de Versão?

Controle de Versão é um sistema que grava as mudanças ocorridas nos arquivos com o passar do tempo para que você possa recuperar versões anteriores especificas. No nosso caso, como desenvolvedores, iremos versionar nosso código-fonte, embora você possa fazê-lo com qualquer tipo de arquivo.

##Sistemas de Controle de Versão Local

Quem nunca versionou um projeto copiando para outro diretorio, colocando backup no nome ou bkp na extensão? Fazer isso é muito simples, mas os riscos também são altos. Você pode se confundir com as versões, esquecer para onde copiou o backup.. e a coisa complica a partir daí. (Neste momento você já está desesperado).

Com o intuito de evitar esse problemas desenvolvedores criaram Sistemas de Controle de Versão Locais que possuem um banco de dados simples que mantém todas as alterações feitas aos arquivos sobre controle do sistema.

![Valid XHTML](/blog/img/git1.png)

##Sistemas de Controle de Versão Centralizados

No entanto um problema maior estava por vir, a necessidade de colaboração entre os desenvolvedores nos projetos fez surgir Sistemas de Controle de Versão Centralizados. Um exemplo deste modelo de VCS (Version Control System) é o Team Foundation Server - Source Control. Neste modelo um servidor contém todos os arquivos versionados e os clientes enviam e baixam arquivos deste repositório centralizado.

Entre as vantagens deste tipo de sistema é a transparência na realização das atividades, pois todos sabem o que o outro está fazendo, administradores tem um maior controle sobre o que é possível fazer, como estabelecer politicas de check-in, além da teórica facilidade de administração.

![Valid XHTML](/blog/img/git2.png)

##Sistemas de Controle de Versão Distribuídos

Em DVCS (Distributed Version Control Systems) os clientes não fazem simplesmente um check-out dos arquivos. Na verdade ele espelha toda o repositório. Desta forma se algum server cair, qualquer um dos clientes pode recupera-lo, copiando o repositório novamente e restaurando-o. Entre exemplos deste sistema estão Mercurial, Git.

Este tipo de sistema trabalha muito bem com repositórios remotos, deste modo você pode colaborar com diferentes grupos de pessoas de diferentes maneiras simultaneamente no mesmo projeto. Permitindo atingir fluxos de trabalho que não são possível em sistemas centralizados.

![Valid XHTML](/blog/img/git2.png)

##A História do Git (resumidamente)

O Kernel do Linux é definitivamente um projeto opensource de larga escala. Na maior parte de seu ciclo de vida mudanças no software foram passadas adiante como patches ou arquivos. Em 2002 o projeto começou a utilizar um DVCS proprietário chamado BitKeeper.

Em 2005 a relação entre a comunidade Linux e o empresa dona do BitKeeper desandou, quando a ferramenta deixou de ser free para esta comunidade. Isto fez com que a comunidade desenvolvesse sua própria ferramenta baseada nos princípios e características do BitKeeper.

Nasce o Git.

Entre as características do projeto:

Velocidade
Design simples
Suporte forte para desenvolvimento não linear
Totalmente distribuído
Habilidade para lidar com grande volume de maneira eficiente
No próximo artigo veremos utilizar o Git para versionar nosso código fonte.

Caso você queira sair na frente pode baixar o Git para Windows no seguinte endereço. E crie uma conta no GitHub.

Abraço e até a próxima!