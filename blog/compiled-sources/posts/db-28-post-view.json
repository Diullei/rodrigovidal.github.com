{"id":"28","title":"F# Para Programadores C# - Parte 2","by":"Rodrigo Vidal","tags":["Programação Funcional, F#, C#"],"category":"Programação Funcional, F#, C#","date":"'2012-06-14'","deploy":"true","content":"Olá pessoal, vamos dar continuidade à série!\n\nA parte 1 você encontra aqui! É indicado que você leia o post anterior antes de continuar.\n\nNeste ponto eu gostaria de recomendar um excelente livro de F# para quem está começando > Programming F# do Chris Smith.\n\n##Aplicações de Funções vs. Invocação de Métodos\n\nEm linguagens funcionais como F#, é comum usar o termo aplicação, para dizer que uma função será executada com um conjunto de argumentos. Enquanto no C# invocamos um método a partir de um objeto.\n\nPara invocar um método de um objeto no C# devemos fazer:\n\n <pre><code>\nobj.Foo(x);\n</code></pre>\nonde obj representa uma objeto qualquer. Enquanto em F# as funções podem ser aplicadas diretamente.\n\n<pre><code>\nfoo x\n</code></pre>\n\n###Funções de Dois Argumentos\n\n**C#**\n\n <pre><code>\nobj.Foo(a,b);\n</code></pre>\n\n**F#**\n\n <pre><code>\nfoo a b\n</code></pre>\nRepare que F# dispensa o uso de parênteses, de virgulas e do ponto e virgula no final, mantendo uma sintaxe mais sucinta.\n\nO Resultado de uma função como argumento\n\n**C#**\n\n <pre><code>\nFoo(Fee(x));\nFoo(a, Fee(b));\n</code></pre>\n\n**F#**\n\n <pre><code>\nfoo (fee x)\nfoo a (fee b)\n</code></pre>\nAssim como em Haskell em F# os parênteses servem para alterar a prioridade de execução.\n\n###Escrevendo suas próprias funções\n\nVocê pode agora criar uma arquivo hello.fsx, sendo FSX de FSharp Script. E adicione o seguinte código:\n\n<pre><code>\nlet add a b = a + b\nlet inc a = add a 1\nlet double x = x + x\nlet quadruple x = double (double x)\n</code></pre>\n\nCaso você esteja usando o VS basta usando ALT + Enter para que o script rode no console interativo. Caso esteja usando o REPL na linha de comando basta colocar C:\\Program Files (x86)\\Microsoft SDKs\\F#\\3.0\\Framework\\v4.0 no path das suas variáveis de ambiente do Windows e digitar fsi .\n\n**C#**\n\n<pre><code>\nFunc<int, int, int> add = (a, b) => a + b;\nFunc<int, int> inc = a => add(a, 1);\nFunc<int, int> @double = x => x + x;\nFunc<int, int> quadruple = x => @double(@double(x));\n</code></pre>\n\nBem parecido, no entanto podemos perceber que o F# trata funções como membros de primeira classe. Pois ele consegue inferir com facilidade o tipo da função sem precisarmos definir o tipo. Enquanto isso o C# trata a função como um objeto, Func, e o mecanismo de inferência não funciona tão bem para resolver isso no C#. \n\nPor hoje era isso!\n\nAbraço,\n\nRodrigo Vidal\n","ref":"fsharp-csharp-parte2.post.mkdown"}