{"id":"16","title":"Programação Funcional - Expressions ao invés de Statements","by":"Rodrigo Vidal","tags":["Programação Funcional, F#"],"category":"Programação Funcional, F#","date":"'2011-11-14'","deploy":"true","content":"\nOlá pessoal tudo bem?\n\nVou falar um pouco hoje sobre mais uma característica de programação funcional e presente na linguagem F#.\n\nEm linguagens imperativas uma expressão é simplesmente um pedaço de código que pode ser avaliado e retorna uma resultado. Então a invocação de um método ou o uso de qualquer operador booleano ou inteiro é uma expressão. Um statement é uma pedaço de código que afeta o estado do programa e que não possui um resultado ou um retorno. Um chamada para um método oque não retorna nenhum valor é um statement, porque ele afeta o estado do programa.\n\nUma atribuição também muda o estado, alterando o valor de uma variável, mas em sua versão simples, não retorna nenhum valor, logo é um statement.\n\nOutro exemplo típico de statement é mudar o fluxo de uma função usando a keyword return, ou até mesmo sair de um loop usando break. Ambos não possuem valor de retorno, ao invés disso, seu único proposito é mudar o estado do programa\n\nComo você sabe, em linguagens funcionais o estado é representado pelo o que a função retorna e a única maneira de se modificar estado é retornando o valor modificado. Seguindo está logica, em linguagens funções tudo é interpretado como uma expressão com um valor de retorno. As consequências podem ser demonstradas com o seguinte exemplo\n\nImagine que queremos somar números de um valor a outro:\n\n<pre><code>\nprivate int SumNumbers(int from, int to)\n{\n    int res = 0;\n    for (int i = from; i <= to; i++)\n        res = res + 1;\n    return res;\n}\n</code></pre>\n\n\nEste código muda estado de variáveis e usa quatro Statements para resolver o problema\n\n<pre><code>\nprivate int SumNumbers(int from, int to)\n{\n    if (from > to) return 0;\n    int sumRest = SumNumbers(from + 1, to);\n    return from + sumRest;\n}\n</code></pre>\n\nComo podem ver todo o corpo do método é uma expressão única que retorna um valor. Em C# isso significa que o método deveria começar com return. E nós também não poderíamos usar return e nenhum outro lugar. Em C# if&minus;then&minus;else é um Statement, já em F# é uma Expressão. Note que são abordagens diferentes, e linguagens funcionais utilizam Expressions em detrimento de Statements.\n\nPor hoje era isso pessoal!\n\nAbraço,\nRodrigo Vidal\n","ref":"prog-func-expressions-x-statements.post.mkdown"}